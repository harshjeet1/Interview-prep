-- https://leetcode.com/studyplan/top-sql-50/
Q1661. Average Time of Process per Machine
There is a factory website that has several machines each running the same number of processes. Write a solution to find the average time each machine takes to complete a process.
The time to complete a process is the 'end' timestamp minus the 'start' timestamp. The average time is calculated by the total time to complete every process on the machine divided by the number of processes that were run.
The resulting table should have the machine_id along with the average time as processing_time, which should be rounded to 3 decimal places.
Return the result table in any order.
Note: There are 3 machines running 2 processes each.
      Machine 0's average time is ((1.520 - 0.712) + (4.120 - 3.140)) / 2 = 0.894

select machine_id, 
        round(avg(
          case WHEN a.activity_type = 'end' 
                THEN a.timestamp else -a.timestamp END)*2,3) as processing_time
from Activity a
group by 1

1251. Average Selling Price --https://leetcode.com/problems/average-selling-price/description/?envType=study-plan-v2&envId=top-sql-50
Write a solution to find the average selling price for each product. average_price should be rounded to 2 decimal places.

Return the result table in any or
SELECT p.product_id, IFNULL(ROUND(SUM(units * price) / SUM(units),2),0) as average_price
FROM Prices p
LEFT JOIN UnitsSold u
ON p.product_id = u.product_id
AND u.purchase_date BETWEEN start_date AND end_date
GROUP BY product_id

1633. Percentage of Users Attended a Contest --https://leetcode.com/problems/percentage-of-users-attended-a-contest/description/?envType=study-plan-v2&envId=top-sql-50
Write a solution to find the percentage of the users registered in each contest rounded to two decimals.
Return the result table ordered by percentage in descending order. In case of a tie, order it by contest_id in ascending order.

Select contest_id, round(count(distinct user_id) *100.00 / (Select count(distinct  user_id) from Users) , 2) as percentage 
from Register 
group by contest_id 
order by percentage desc, contest_id;

1174. Immediate Food Delivery II --https://leetcode.com/problems/immediate-food-delivery-ii/description/?envType=study-plan-v2&envId=top-sql-50
If the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled.
The first order of a customer is the order with the earliest order date that the customer made. It is guaranteed that a customer has precisely one first order.
Write a solution to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.

with cte as (
select *, 
    rank() over(partition by customer_id order by order_date) as rn,
    case when order_date = customer_pref_delivery_date then 'immediate' else 'scheduled' end  as status
from Delivery)
select 
   round(100 * sum(case when status = 'immediate' then 1 else 0 end)/ count(*),2) as immediate_percentage 
from cte 
where rn = 1

602. Friend Requests II: Who Has the Most Friends --https://leetcode.com/problems/friend-requests-ii-who-has-the-most-friends/description/?envType=study-plan-v2&envId=top-sql-50
Q.Write a solution to find the people who have the most friends and the most friends number.
with cte as 
(select requester_id as id
from RequestAccepted
union all 
select accepter_id as id
from RequestAccepted)
select id, count(*)  as num 
from cte 
group by 1 
order by 2 desc 
limit 1

1321. Restaurant Growth --https://leetcode.com/problems/restaurant-growth/description/?envType=study-plan-v2&envId=top-sql-50
Q. Compute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before). average_amount should be rounded to two decimal places.
Return the result table ordered by visited_on in ascending order.

WITH CTE AS
(select visited_on,
    sum(amount) as daily_amount
    from Customer
    group by visited_on)
SELECT visited_on, 
    SUM(daily_amount) OVER(ORDER BY visited_on ROWS BETWEEN 6 PRECEDING AND CURRENT ROW ) AS AMOUNT,
    ROUND(AVG(daily_amount) OVER(ORDER BY visited_on ROWS BETWEEN 6 PRECEDING AND CURRENT ROW ),2) AS average_amount
FROM CTE 
OFFSET 6 

1164. Product Price at a Given Date --https://leetcode.com/problems/product-price-at-a-given-date/description/?envType=study-plan-v2&envId=top-sql-50
Q.Write a solution to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.
Return the result table in any order.

with cte as 
(select *, rank() over(partition by product_id order by change_date desc) as r
from Products 
where change_date <= '2019-08-16')

select product_id, new_price as price
from cte where r = 1
union 

select product_id , 10 as price
from products 
where  product_id not in (select product_id from cte)

1731. The Number of Employees Which Report to Each Employee --https://leetcode.com/problems/the-number-of-employees-which-report-to-each-employee/description/?envType=study-plan-v2&envId=top-sql-50
Q.Write a solution to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.
Return the result table ordered by employee_id.

/*
select
e1.employee_id,
e1.name,
count(e1.employee_id) reports_count,
round(avg(e2.age)) average_age
from Employees e1
join Employees e2
on e1.employee_id = e2.reports_to
group by 1,2
order by e1.employee_id
*/
WITH CTE AS (
SELECT reports_to , COUNT(employee_id) AS reports_count, ROUND(AVG(AGE)) AS average_age
FROM Employees 
WHERE reports_to IS NOT NULL
GROUP BY reports_to)

SELECT CTE.reports_to AS employee_id, e.name, reports_count,average_age
FROM CTE
LEFT JOIN Employees e 
ON CTE.reports_to = e.employee_id 
ORDER BY e.employee_id 
